// Generated by gRPC Go plugin
// If you make any local changes, they will be lost
//source: flatums

package flatums

import (
	"context"

	flatbuffers "github.com/google/flatbuffers/go"
	"google.golang.org/grpc"
)

// Client API for AaaService service
type AaaServiceClient interface {
	Active(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*AccessResult, error)
	Import(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*Result, error)
}

type aaaServiceClient struct {
	cc *grpc.ClientConn
}

func NewAaaServiceClient(cc *grpc.ClientConn) AaaServiceClient {
	return &aaaServiceClient{cc}
}

func (c *aaaServiceClient) Active(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*AccessResult, error) {
	out := new(AccessResult)
	err := grpc.Invoke(ctx, "/flatums.AaaService/Active", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aaaServiceClient) Import(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/flatums.AaaService/Import", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AaaService service
type AaaServiceServer interface {
	Active(context.Context, *TerminalRequest) (*flatbuffers.Builder, error)
	Import(context.Context, *TerminalList) (*flatbuffers.Builder, error)
}

func RegisterAaaServiceServer(s *grpc.Server, srv AaaServiceServer) {
	s.RegisterService(&_AaaService_serviceDesc, srv)
}

func _AaaService_Active_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AaaServiceServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flatums.AaaService/Active",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AaaServiceServer).Active(ctx, req.(*TerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AaaService_Import_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AaaServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flatums.AaaService/Import",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AaaServiceServer).Import(ctx, req.(*TerminalList))
	}
	return interceptor(ctx, in, info, handler)
}

var _AaaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flatums.AaaService",
	HandlerType: (*AaaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Active",
			Handler:    _AaaService_Active_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _AaaService_Import_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
