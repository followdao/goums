// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatums

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// AccessProfile access
type AccessProfileT struct {
	UserID     string
	ActiveDate string
	Expiration string
}

func AccessProfilePack(builder *flatbuffers.Builder, t *AccessProfileT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	UserIDOffset := builder.CreateString(t.UserID)
	activeDateOffset := builder.CreateString(t.ActiveDate)
	ExpirationOffset := builder.CreateString(t.Expiration)
	AccessProfileStart(builder)
	AccessProfileAddUserID(builder, UserIDOffset)
	AccessProfileAddActiveDate(builder, activeDateOffset)
	AccessProfileAddExpiration(builder, ExpirationOffset)
	return AccessProfileEnd(builder)
}

func (rcv *AccessProfile) UnPackTo(t *AccessProfileT) {
	t.UserID = string(rcv.UserID())
	t.ActiveDate = string(rcv.ActiveDate())
	t.Expiration = string(rcv.Expiration())
}

func (rcv *AccessProfile) UnPack() *AccessProfileT {
	if rcv == nil {
		return nil
	}
	t := &AccessProfileT{}
	rcv.UnPackTo(t)
	return t
}

type AccessProfile struct {
	_tab flatbuffers.Table
}

func GetRootAsAccessProfile(buf []byte, offset flatbuffers.UOffsetT) *AccessProfile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccessProfile{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccessProfile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccessProfile) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccessProfile) UserID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccessProfile) ActiveDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccessProfile) Expiration() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AccessProfileStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}

func AccessProfileAddUserID(builder *flatbuffers.Builder, UserID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(UserID), 0)
}

func AccessProfileAddActiveDate(builder *flatbuffers.Builder, activeDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(activeDate), 0)
}

func AccessProfileAddExpiration(builder *flatbuffers.Builder, Expiration flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Expiration), 0)
}

func AccessProfileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
