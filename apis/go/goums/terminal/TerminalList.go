// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package terminal

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TerminalListT struct {
	Count int64
	List  []*TerminalProfileT
}

func TerminalListPack(builder *flatbuffers.Builder, t *TerminalListT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ListOffset := flatbuffers.UOffsetT(0)
	if t.List != nil {
		ListLength := len(t.List)
		ListOffsets := make([]flatbuffers.UOffsetT, ListLength)
		for j := 0; j < ListLength; j++ {
			ListOffsets[j] = TerminalProfilePack(builder, t.List[j])
		}
		TerminalListStartListVector(builder, ListLength)
		for j := ListLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(ListOffsets[j])
		}
		ListOffset = builder.EndVector(ListLength)
	}
	TerminalListStart(builder)
	TerminalListAddCount(builder, t.Count)
	TerminalListAddList(builder, ListOffset)
	return TerminalListEnd(builder)
}

func (rcv *TerminalList) UnPackTo(t *TerminalListT) {
	t.Count = rcv.Count()
	ListLength := rcv.ListLength()
	t.List = make([]*TerminalProfileT, ListLength)
	for j := 0; j < ListLength; j++ {
		x := TerminalProfile{}
		rcv.List(&x, j)
		t.List[j] = x.UnPack()
	}
}

func (rcv *TerminalList) UnPack() *TerminalListT {
	if rcv == nil {
		return nil
	}
	t := &TerminalListT{}
	rcv.UnPackTo(t)
	return t
}

type TerminalList struct {
	_tab flatbuffers.Table
}

func GetRootAsTerminalList(buf []byte, offset flatbuffers.UOffsetT) *TerminalList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TerminalList{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TerminalList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TerminalList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TerminalList) Count() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TerminalList) MutateCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *TerminalList) List(obj *TerminalProfile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TerminalList) ListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TerminalListStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TerminalListAddCount(builder *flatbuffers.Builder, Count int64) {
	builder.PrependInt64Slot(0, Count, 0)
}
func TerminalListAddList(builder *flatbuffers.Builder, List flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(List), 0)
}
func TerminalListStartListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TerminalListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
