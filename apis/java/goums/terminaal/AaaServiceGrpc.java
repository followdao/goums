//Generated by flatc compiler (version 1.11.0)
//If you make any local changes, they will be lost
//source: flatums.fbs

package goums.terminal;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 * <pre>
 * UmsService backend gRPC service
 * </pre>
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: flatums.fbs")
public final class AaaServiceGrpc {

  private AaaServiceGrpc() {}
  
  public static final String SERVICE_NAME = "goums.terminal.AaaService";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getActiveMethod()} instead. 
  public static final io.grpc.MethodDescriptor<goums.terminal.TerminalRequest,
      goums.terminal.AccessResult> METHOD_ACTIVE = getActiveMethod();
  
  private static volatile io.grpc.MethodDescriptor<goums.terminal.TerminalRequest,
      goums.terminal.AccessResult> getActiveMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<goums.terminal.TerminalRequest> extractorOfTerminalRequest;
  private static FlatbuffersUtils.FBExtactor<goums.terminal.TerminalRequest> getExtractorOfTerminalRequest() {
      if (extractorOfTerminalRequest != null) return extractorOfTerminalRequest;
      synchronized (AaaServiceGrpc.class) {
          if (extractorOfTerminalRequest != null) return extractorOfTerminalRequest;
          extractorOfTerminalRequest = new FlatbuffersUtils.FBExtactor<goums.terminal.TerminalRequest>() {
              public goums.terminal.TerminalRequest extract (ByteBuffer buffer) {
                  return goums.terminal.TerminalRequest.getRootAsTerminalRequest(buffer);
              }
          };
          return extractorOfTerminalRequest;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<goums.terminal.AccessResult> extractorOfAccessResult;
  private static FlatbuffersUtils.FBExtactor<goums.terminal.AccessResult> getExtractorOfAccessResult() {
      if (extractorOfAccessResult != null) return extractorOfAccessResult;
      synchronized (AaaServiceGrpc.class) {
          if (extractorOfAccessResult != null) return extractorOfAccessResult;
          extractorOfAccessResult = new FlatbuffersUtils.FBExtactor<goums.terminal.AccessResult>() {
              public goums.terminal.AccessResult extract (ByteBuffer buffer) {
                  return goums.terminal.AccessResult.getRootAsAccessResult(buffer);
              }
          };
          return extractorOfAccessResult;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<goums.terminal.TerminalRequest,
      goums.terminal.AccessResult> getActiveMethod() {
    io.grpc.MethodDescriptor<goums.terminal.TerminalRequest, goums.terminal.AccessResult> getActiveMethod;
    if ((getActiveMethod = AaaServiceGrpc.getActiveMethod) == null) {
      synchronized (AaaServiceGrpc.class) {
        if ((getActiveMethod = AaaServiceGrpc.getActiveMethod) == null) {
          AaaServiceGrpc.getActiveMethod = getActiveMethod = 
              io.grpc.MethodDescriptor.<goums.terminal.TerminalRequest, goums.terminal.AccessResult>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "goums.terminal.AaaService", "Active"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  goums.terminal.TerminalRequest.class, getExtractorOfTerminalRequest()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  goums.terminal.AccessResult.class, getExtractorOfAccessResult()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getActiveMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getImportMethod()} instead. 
  public static final io.grpc.MethodDescriptor<goums.terminal.TerminalList,
      goums.terminal.Result> METHOD_IMPORT = getImportMethod();
  
  private static volatile io.grpc.MethodDescriptor<goums.terminal.TerminalList,
      goums.terminal.Result> getImportMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<goums.terminal.TerminalList> extractorOfTerminalList;
  private static FlatbuffersUtils.FBExtactor<goums.terminal.TerminalList> getExtractorOfTerminalList() {
      if (extractorOfTerminalList != null) return extractorOfTerminalList;
      synchronized (AaaServiceGrpc.class) {
          if (extractorOfTerminalList != null) return extractorOfTerminalList;
          extractorOfTerminalList = new FlatbuffersUtils.FBExtactor<goums.terminal.TerminalList>() {
              public goums.terminal.TerminalList extract (ByteBuffer buffer) {
                  return goums.terminal.TerminalList.getRootAsTerminalList(buffer);
              }
          };
          return extractorOfTerminalList;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<goums.terminal.Result> extractorOfResult;
  private static FlatbuffersUtils.FBExtactor<goums.terminal.Result> getExtractorOfResult() {
      if (extractorOfResult != null) return extractorOfResult;
      synchronized (AaaServiceGrpc.class) {
          if (extractorOfResult != null) return extractorOfResult;
          extractorOfResult = new FlatbuffersUtils.FBExtactor<goums.terminal.Result>() {
              public goums.terminal.Result extract (ByteBuffer buffer) {
                  return goums.terminal.Result.getRootAsResult(buffer);
              }
          };
          return extractorOfResult;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<goums.terminal.TerminalList,
      goums.terminal.Result> getImportMethod() {
    io.grpc.MethodDescriptor<goums.terminal.TerminalList, goums.terminal.Result> getImportMethod;
    if ((getImportMethod = AaaServiceGrpc.getImportMethod) == null) {
      synchronized (AaaServiceGrpc.class) {
        if ((getImportMethod = AaaServiceGrpc.getImportMethod) == null) {
          AaaServiceGrpc.getImportMethod = getImportMethod = 
              io.grpc.MethodDescriptor.<goums.terminal.TerminalList, goums.terminal.Result>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "goums.terminal.AaaService", "Import"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  goums.terminal.TerminalList.class, getExtractorOfTerminalList()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  goums.terminal.Result.class, getExtractorOfResult()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getImportMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static AaaServiceStub newStub(io.grpc.Channel channel) {
    return new AaaServiceStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static AaaServiceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new AaaServiceBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static AaaServiceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new AaaServiceFutureStub(channel);
  }
  
  /**
   * <pre>
   * UmsService backend gRPC service
   * </pre>
   */
  public static abstract class AaaServiceImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void active(goums.terminal.TerminalRequest request,
        io.grpc.stub.StreamObserver<goums.terminal.AccessResult> responseObserver)     {
      asyncUnimplementedUnaryCall(getActiveMethod(), responseObserver);
    }
    
    /**
     */
    public     void import(goums.terminal.TerminalList request,
        io.grpc.stub.StreamObserver<goums.terminal.Result> responseObserver)     {
      asyncUnimplementedUnaryCall(getImportMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getActiveMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                goums.terminal.TerminalRequest,
                goums.terminal.AccessResult>(
                  this, METHODID_ACTIVE)))
          .addMethod(
            getImportMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                goums.terminal.TerminalList,
                goums.terminal.Result>(
                  this, METHODID_IMPORT)))
          .build();
    }
  }
  
  /**
   * <pre>
   * UmsService backend gRPC service
   * </pre>
   */
  public static final class AaaServiceStub extends io.grpc.stub.AbstractStub<AaaServiceStub> {
    private AaaServiceStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private AaaServiceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected AaaServiceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new AaaServiceStub(channel, callOptions);
    }
    
    /**
     */
    public     void active(goums.terminal.TerminalRequest request,
        io.grpc.stub.StreamObserver<goums.terminal.AccessResult> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getActiveMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void import(goums.terminal.TerminalList request,
        io.grpc.stub.StreamObserver<goums.terminal.Result> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getImportMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   * <pre>
   * UmsService backend gRPC service
   * </pre>
   */
  public static final class AaaServiceBlockingStub extends io.grpc.stub.AbstractStub<AaaServiceBlockingStub> {
    private AaaServiceBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private AaaServiceBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected AaaServiceBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new AaaServiceBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     goums.terminal.AccessResult active(goums.terminal.TerminalRequest request)     {
      return blockingUnaryCall(
          getChannel(), getActiveMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     goums.terminal.Result import(goums.terminal.TerminalList request)     {
      return blockingUnaryCall(
          getChannel(), getImportMethod(), getCallOptions(), request);
    }
  }
  
  /**
   * <pre>
   * UmsService backend gRPC service
   * </pre>
   */
  public static final class AaaServiceFutureStub extends io.grpc.stub.AbstractStub<AaaServiceFutureStub> {
    private AaaServiceFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private AaaServiceFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected AaaServiceFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new AaaServiceFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<goums.terminal.AccessResult> active(
        goums.terminal.TerminalRequest request)     {
      return futureUnaryCall(
          getChannel().newCall(getActiveMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<goums.terminal.Result> import(
        goums.terminal.TerminalList request)     {
      return futureUnaryCall(
          getChannel().newCall(getImportMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_ACTIVE = 0;
  private static final int METHODID_IMPORT = 1;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final AaaServiceImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(AaaServiceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_ACTIVE:
          serviceImpl.active((goums.terminal.TerminalRequest) request,
              (io.grpc.stub.StreamObserver<goums.terminal.AccessResult>) responseObserver);
          break;
        case METHODID_IMPORT:
          serviceImpl.import((goums.terminal.TerminalList) request,
              (io.grpc.stub.StreamObserver<goums.terminal.Result>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (AaaServiceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getActiveMethod())              
              .addMethod(getImportMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
