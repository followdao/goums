// automatically generated by the FlatBuffers compiler, do not modify

package goums.terminal;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * AccessProfile access
 */
public final class AccessProfile extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static AccessProfile getRootAsAccessProfile(ByteBuffer _bb) { return getRootAsAccessProfile(_bb, new AccessProfile()); }
  public static AccessProfile getRootAsAccessProfile(ByteBuffer _bb, AccessProfile obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AccessProfile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String UserID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer UserIDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer UserIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String activeDate() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer activeDateAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer activeDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String Expiration() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ExpirationAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ExpirationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createAccessProfile(FlatBufferBuilder builder,
      int UserIDOffset,
      int activeDateOffset,
      int ExpirationOffset) {
    builder.startTable(3);
    AccessProfile.addExpiration(builder, ExpirationOffset);
    AccessProfile.addActiveDate(builder, activeDateOffset);
    AccessProfile.addUserID(builder, UserIDOffset);
    return AccessProfile.endAccessProfile(builder);
  }

  public static void startAccessProfile(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addUserID(FlatBufferBuilder builder, int UserIDOffset) { builder.addOffset(0, UserIDOffset, 0); }
  public static void addActiveDate(FlatBufferBuilder builder, int activeDateOffset) { builder.addOffset(1, activeDateOffset, 0); }
  public static void addExpiration(FlatBufferBuilder builder, int ExpirationOffset) { builder.addOffset(2, ExpirationOffset, 0); }
  public static int endAccessProfile(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AccessProfile get(int j) { return get(new AccessProfile(), j); }
    public AccessProfile get(AccessProfile obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

