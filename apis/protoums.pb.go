// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protoums.proto

package protoums

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceStatusType int32

const (
	ServiceStatusType_default  ServiceStatusType = 0
	ServiceStatusType_active   ServiceStatusType = 1
	ServiceStatusType_suspend  ServiceStatusType = 2
	ServiceStatusType_disabled ServiceStatusType = 3
	ServiceStatusType_deleted  ServiceStatusType = 4
)

var ServiceStatusType_name = map[int32]string{
	0: "default",
	1: "active",
	2: "suspend",
	3: "disabled",
	4: "deleted",
}

var ServiceStatusType_value = map[string]int32{
	"default":  0,
	"active":   1,
	"suspend":  2,
	"disabled": 3,
	"deleted":  4,
}

func (x ServiceStatusType) String() string {
	return proto.EnumName(ServiceStatusType_name, int32(x))
}

func (ServiceStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b63d550ca130b592, []int{0}
}

type OperationType int32

const (
	OperationType_UnDefine OperationType = 0
	OperationType_insert   OperationType = 1
	OperationType_update   OperationType = 2
	OperationType_delete   OperationType = 3
)

var OperationType_name = map[int32]string{
	0: "UnDefine",
	1: "insert",
	2: "update",
	3: "delete",
}

var OperationType_value = map[string]int32{
	"UnDefine": 0,
	"insert":   1,
	"update":   2,
	"delete":   3,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}

func (OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b63d550ca130b592, []int{1}
}

/// Result define sn response
type Result struct {
	Tid                  int64    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Code                 int64    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63d550ca130b592, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}

func (m *Result) XXX_Size() int {
	return m.Size()
}

func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *Result) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

/// AccessResult  result
type AccessResult struct {
	Me                   *AccessProfile `protobuf:"bytes,1,opt,name=Me,proto3" json:"Me,omitempty"`
	Token                string         `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AccessResult) Reset()         { *m = AccessResult{} }
func (m *AccessResult) String() string { return proto.CompactTextString(m) }
func (*AccessResult) ProtoMessage()    {}
func (*AccessResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63d550ca130b592, []int{1}
}

func (m *AccessResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *AccessResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *AccessResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessResult.Merge(m, src)
}

func (m *AccessResult) XXX_Size() int {
	return m.Size()
}

func (m *AccessResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessResult.DiscardUnknown(m)
}

var xxx_messageInfo_AccessResult proto.InternalMessageInfo

func (m *AccessResult) GetMe() *AccessProfile {
	if m != nil {
		return m.Me
	}
	return nil
}

func (m *AccessResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

/// AccessProfile access
type AccessProfile struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	RegisterDate         string   `protobuf:"bytes,2,opt,name=RegisterDate,proto3" json:"RegisterDate,omitempty"`
	Expiration           string   `protobuf:"bytes,3,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessProfile) Reset()         { *m = AccessProfile{} }
func (m *AccessProfile) String() string { return proto.CompactTextString(m) }
func (*AccessProfile) ProtoMessage()    {}
func (*AccessProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63d550ca130b592, []int{2}
}

func (m *AccessProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *AccessProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *AccessProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessProfile.Merge(m, src)
}

func (m *AccessProfile) XXX_Size() int {
	return m.Size()
}

func (m *AccessProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessProfile.DiscardUnknown(m)
}

var xxx_messageInfo_AccessProfile proto.InternalMessageInfo

func (m *AccessProfile) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AccessProfile) GetRegisterDate() string {
	if m != nil {
		return m.RegisterDate
	}
	return ""
}

func (m *AccessProfile) GetExpiration() string {
	if m != nil {
		return m.Expiration
	}
	return ""
}

type TerminalList struct {
	Count                int64              `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	List                 []*TerminalProfile `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TerminalList) Reset()         { *m = TerminalList{} }
func (m *TerminalList) String() string { return proto.CompactTextString(m) }
func (*TerminalList) ProtoMessage()    {}
func (*TerminalList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63d550ca130b592, []int{3}
}

func (m *TerminalList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *TerminalList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminalList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *TerminalList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminalList.Merge(m, src)
}

func (m *TerminalList) XXX_Size() int {
	return m.Size()
}

func (m *TerminalList) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminalList.DiscardUnknown(m)
}

var xxx_messageInfo_TerminalList proto.InternalMessageInfo

func (m *TerminalList) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TerminalList) GetList() []*TerminalProfile {
	if m != nil {
		return m.List
	}
	return nil
}

/// TerminalProfile 认证成功后返回用户详细档案
type TerminalProfile struct {
	UserID               int64             `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ActiveStatus         bool              `protobuf:"varint,2,opt,name=activeStatus,proto3" json:"activeStatus,omitempty"`
	ActiveDate           int64             `protobuf:"varint,3,opt,name=activeDate,proto3" json:"activeDate,omitempty"`
	MaxActiveSession     int64             `protobuf:"varint,4,opt,name=maxActiveSession,proto3" json:"maxActiveSession,omitempty"`
	ServiceStatus        ServiceStatusType `protobuf:"varint,5,opt,name=serviceStatus,proto3,enum=protoums.ServiceStatusType" json:"serviceStatus,omitempty"`
	ServiceExpiration    int64             `protobuf:"varint,6,opt,name=serviceExpiration,proto3" json:"serviceExpiration,omitempty"`
	SerialNumber         string            `protobuf:"bytes,7,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	ActiveCode           string            `protobuf:"bytes,8,opt,name=activeCode,proto3" json:"activeCode,omitempty"`
	AccessRole           string            `protobuf:"bytes,9,opt,name=accessRole,proto3" json:"accessRole,omitempty"`
	Operation            OperationType     `protobuf:"varint,10,opt,name=operation,proto3,enum=protoums.OperationType" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TerminalProfile) Reset()         { *m = TerminalProfile{} }
func (m *TerminalProfile) String() string { return proto.CompactTextString(m) }
func (*TerminalProfile) ProtoMessage()    {}
func (*TerminalProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63d550ca130b592, []int{4}
}

func (m *TerminalProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *TerminalProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminalProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *TerminalProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminalProfile.Merge(m, src)
}

func (m *TerminalProfile) XXX_Size() int {
	return m.Size()
}

func (m *TerminalProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminalProfile.DiscardUnknown(m)
}

var xxx_messageInfo_TerminalProfile proto.InternalMessageInfo

func (m *TerminalProfile) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *TerminalProfile) GetActiveStatus() bool {
	if m != nil {
		return m.ActiveStatus
	}
	return false
}

func (m *TerminalProfile) GetActiveDate() int64 {
	if m != nil {
		return m.ActiveDate
	}
	return 0
}

func (m *TerminalProfile) GetMaxActiveSession() int64 {
	if m != nil {
		return m.MaxActiveSession
	}
	return 0
}

func (m *TerminalProfile) GetServiceStatus() ServiceStatusType {
	if m != nil {
		return m.ServiceStatus
	}
	return ServiceStatusType_default
}

func (m *TerminalProfile) GetServiceExpiration() int64 {
	if m != nil {
		return m.ServiceExpiration
	}
	return 0
}

func (m *TerminalProfile) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *TerminalProfile) GetActiveCode() string {
	if m != nil {
		return m.ActiveCode
	}
	return ""
}

func (m *TerminalProfile) GetAccessRole() string {
	if m != nil {
		return m.AccessRole
	}
	return ""
}

func (m *TerminalProfile) GetOperation() OperationType {
	if m != nil {
		return m.Operation
	}
	return OperationType_UnDefine
}

func init() {
	proto.RegisterEnum("protoums.ServiceStatusType", ServiceStatusType_name, ServiceStatusType_value)
	proto.RegisterEnum("protoums.OperationType", OperationType_name, OperationType_value)
	proto.RegisterType((*Result)(nil), "protoums.Result")
	proto.RegisterType((*AccessResult)(nil), "protoums.AccessResult")
	proto.RegisterType((*AccessProfile)(nil), "protoums.AccessProfile")
	proto.RegisterType((*TerminalList)(nil), "protoums.TerminalList")
	proto.RegisterType((*TerminalProfile)(nil), "protoums.TerminalProfile")
}

func init() { proto.RegisterFile("protoums.proto", fileDescriptor_b63d550ca130b592) }

var fileDescriptor_b63d550ca130b592 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0xa4, 0xeb, 0xc7, 0x69, 0x3b, 0x3c, 0x0b, 0x41, 0x10, 0x52, 0x55, 0xe5, 0x86,
	0xaa, 0x82, 0x5d, 0x14, 0xf1, 0x00, 0x65, 0x45, 0x02, 0x89, 0x02, 0x72, 0xbb, 0x07, 0x70, 0x9b,
	0xd3, 0xc9, 0x5a, 0x9a, 0x44, 0xb6, 0x33, 0x8d, 0x37, 0xe1, 0x05, 0x78, 0x17, 0x2e, 0x79, 0x04,
	0x54, 0x5e, 0x04, 0xd9, 0x4e, 0x48, 0xba, 0xde, 0x9d, 0xf3, 0xff, 0x9f, 0xaf, 0x5f, 0x62, 0xb8,
	0xc8, 0x65, 0xa6, 0xb3, 0x62, 0xaf, 0xae, 0x6c, 0x40, 0xbb, 0x55, 0x1e, 0x7d, 0x84, 0x36, 0x43,
	0x55, 0x24, 0x9a, 0x12, 0x08, 0xb4, 0x88, 0x43, 0x6f, 0xec, 0x4d, 0x02, 0x66, 0x42, 0x4a, 0xa1,
	0xb5, 0xcd, 0x62, 0x0c, 0x7d, 0x2b, 0xd9, 0x98, 0x86, 0xd0, 0xd9, 0xa3, 0x52, 0xfc, 0x16, 0xc3,
	0x60, 0xec, 0x4d, 0x7a, 0xac, 0x4a, 0xa3, 0x25, 0x0c, 0xe6, 0xdb, 0x2d, 0x2a, 0x55, 0xce, 0x7b,
	0x05, 0xfe, 0x12, 0xed, 0xb8, 0xfe, 0xec, 0xf9, 0xd5, 0xff, 0x03, 0x5c, 0xcd, 0x37, 0x99, 0xed,
	0x44, 0x82, 0xcc, 0x5f, 0x22, 0x7d, 0x0a, 0xe7, 0xeb, 0xec, 0x0e, 0x53, 0xbb, 0xa7, 0xc7, 0x5c,
	0x12, 0xdd, 0xc1, 0xf0, 0xa8, 0x94, 0x3e, 0x83, 0xf6, 0x8d, 0x42, 0xf9, 0x69, 0x61, 0x67, 0xf6,
	0x58, 0x99, 0xd1, 0x08, 0x06, 0x0c, 0x6f, 0x85, 0xd2, 0x28, 0x17, 0x5c, 0x63, 0x39, 0xe5, 0x48,
	0xa3, 0x23, 0x80, 0x0f, 0x0f, 0xb9, 0x90, 0x5c, 0x8b, 0x2c, 0x2d, 0x0f, 0x6f, 0x28, 0xd1, 0x0a,
	0x06, 0x6b, 0x94, 0x7b, 0x91, 0xf2, 0xe4, 0xb3, 0x50, 0xda, 0x9c, 0x74, 0x9d, 0x15, 0xa9, 0x2e,
	0xbf, 0x86, 0x4b, 0xe8, 0x1b, 0x68, 0x19, 0x37, 0xf4, 0xc7, 0xc1, 0xa4, 0x3f, 0x7b, 0x51, 0x33,
	0x55, 0xbd, 0x15, 0x95, 0x2d, 0x8b, 0x7e, 0x06, 0xf0, 0xe4, 0x91, 0x63, 0x20, 0x8a, 0x1a, 0x22,
	0x60, 0x65, 0x66, 0x20, 0xf8, 0x56, 0x8b, 0x7b, 0x5c, 0x69, 0xae, 0x0b, 0x65, 0x21, 0xba, 0xec,
	0x48, 0x33, 0x10, 0x2e, 0xb7, 0x98, 0x81, 0xed, 0x6f, 0x28, 0x74, 0x0a, 0x64, 0xcf, 0x1f, 0xe6,
	0xae, 0x05, 0x95, 0x32, 0xa8, 0x2d, 0x5b, 0x75, 0xa2, 0xd3, 0x39, 0x0c, 0x15, 0xca, 0x7b, 0xb1,
	0xad, 0x16, 0x9e, 0x8f, 0xbd, 0xc9, 0xc5, 0xec, 0x65, 0xcd, 0xb4, 0x6a, 0xda, 0xeb, 0xef, 0x39,
	0xb2, 0xe3, 0x0e, 0xfa, 0x1a, 0x2e, 0x4b, 0xa1, 0xf1, 0x69, 0xdb, 0x76, 0xdf, 0xa9, 0x61, 0x00,
	0x15, 0x4a, 0xc1, 0x93, 0x2f, 0xc5, 0x7e, 0x83, 0x32, 0xec, 0xb8, 0xbf, 0xd4, 0xd4, 0x6a, 0xc0,
	0x6b, 0xf3, 0xea, 0xba, 0xee, 0x2f, 0xd5, 0x8a, 0xf3, 0xed, 0x0b, 0xcb, 0x12, 0x0c, 0x7b, 0x95,
	0x5f, 0x29, 0xf4, 0x1d, 0xf4, 0xb2, 0x1c, 0xcb, 0x4b, 0xc0, 0x02, 0x35, 0x1e, 0xde, 0xd7, 0xca,
	0xb2, 0x30, 0x75, 0xe5, 0x74, 0x0d, 0x97, 0x27, 0xb0, 0xb4, 0x0f, 0x9d, 0x18, 0x77, 0xbc, 0x48,
	0x34, 0x39, 0xa3, 0x00, 0x6d, 0x77, 0x06, 0xf1, 0x8c, 0xa1, 0x0a, 0x95, 0x63, 0x1a, 0x13, 0x9f,
	0x0e, 0xa0, 0x1b, 0x0b, 0xc5, 0x37, 0x09, 0xc6, 0x24, 0x70, 0x3d, 0x09, 0x6a, 0x8c, 0x49, 0x6b,
	0x3a, 0x87, 0xe1, 0xd1, 0x46, 0x53, 0x7b, 0x93, 0x2e, 0x70, 0x27, 0x52, 0x74, 0x23, 0x45, 0xaa,
	0x50, 0x6a, 0xe2, 0x99, 0xb8, 0xc8, 0x63, 0xae, 0x91, 0xf8, 0x26, 0x76, 0x33, 0x48, 0xf0, 0x9e,
	0xfc, 0x3a, 0x8c, 0xbc, 0xdf, 0x87, 0x91, 0xf7, 0xe7, 0x30, 0xf2, 0x7e, 0xfc, 0x1d, 0x9d, 0x6d,
	0xda, 0x96, 0xe6, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xf3, 0x94, 0x65, 0xd0, 0x03,
	0x00, 0x00,
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if m.Tid != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccessResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Me != nil {
		{
			size, err := m.Me.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoums(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccessProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Expiration) > 0 {
		i -= len(m.Expiration)
		copy(dAtA[i:], m.Expiration)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.Expiration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RegisterDate) > 0 {
		i -= len(m.RegisterDate)
		copy(dAtA[i:], m.RegisterDate)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.RegisterDate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminalList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminalList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminalList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtoums(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TerminalProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminalProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminalProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Operation != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x50
	}
	if len(m.AccessRole) > 0 {
		i -= len(m.AccessRole)
		copy(dAtA[i:], m.AccessRole)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.AccessRole)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ActiveCode) > 0 {
		i -= len(m.ActiveCode)
		copy(dAtA[i:], m.ActiveCode)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.ActiveCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintProtoums(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ServiceExpiration != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.ServiceExpiration))
		i--
		dAtA[i] = 0x30
	}
	if m.ServiceStatus != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.ServiceStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxActiveSession != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.MaxActiveSession))
		i--
		dAtA[i] = 0x20
	}
	if m.ActiveDate != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.ActiveDate))
		i--
		dAtA[i] = 0x18
	}
	if m.ActiveStatus {
		i--
		if m.ActiveStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintProtoums(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtoums(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoums(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovProtoums(uint64(m.Tid))
	}
	if m.Code != 0 {
		n += 1 + sovProtoums(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccessResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Me != nil {
		l = m.Me.Size()
		n += 1 + l + sovProtoums(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccessProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	l = len(m.RegisterDate)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	l = len(m.Expiration)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TerminalList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovProtoums(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovProtoums(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TerminalProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovProtoums(uint64(m.UserID))
	}
	if m.ActiveStatus {
		n += 2
	}
	if m.ActiveDate != 0 {
		n += 1 + sovProtoums(uint64(m.ActiveDate))
	}
	if m.MaxActiveSession != 0 {
		n += 1 + sovProtoums(uint64(m.MaxActiveSession))
	}
	if m.ServiceStatus != 0 {
		n += 1 + sovProtoums(uint64(m.ServiceStatus))
	}
	if m.ServiceExpiration != 0 {
		n += 1 + sovProtoums(uint64(m.ServiceExpiration))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	l = len(m.ActiveCode)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	l = len(m.AccessRole)
	if l > 0 {
		n += 1 + l + sovProtoums(uint64(l))
	}
	if m.Operation != 0 {
		n += 1 + sovProtoums(uint64(m.Operation))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProtoums(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozProtoums(x uint64) (n int) {
	return sovProtoums(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoums
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtoums(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *AccessResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoums
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Me", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Me == nil {
				m.Me = &AccessProfile{}
			}
			if err := m.Me.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtoums(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *AccessProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoums
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expiration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtoums(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *TerminalList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoums
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminalList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminalList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &TerminalProfile{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtoums(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *TerminalProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoums
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminalProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminalProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveStatus = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDate", wireType)
			}
			m.ActiveDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActiveSession", wireType)
			}
			m.MaxActiveSession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxActiveSession |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceStatus", wireType)
			}
			m.ServiceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceStatus |= ServiceStatusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceExpiration", wireType)
			}
			m.ServiceExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceExpiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoums
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoums
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= OperationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtoums(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoums
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipProtoums(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoums
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoums
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoums
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoums
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoums
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoums        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoums          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoums = fmt.Errorf("proto: unexpected end of group")
)
