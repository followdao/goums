// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package session

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserSessionT struct {
	MaxActiveSessions int64
	CAA               int64
	ExpirationTime    int64
	ID                string
	Role              string
}

func (t *UserSessionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	IDOffset := builder.CreateString(t.ID)
	RoleOffset := builder.CreateString(t.Role)
	UserSessionStart(builder)
	UserSessionAddMaxActiveSessions(builder, t.MaxActiveSessions)
	UserSessionAddCAA(builder, t.CAA)
	UserSessionAddExpirationTime(builder, t.ExpirationTime)
	UserSessionAddID(builder, IDOffset)
	UserSessionAddRole(builder, RoleOffset)
	return UserSessionEnd(builder)
}

func (rcv *UserSessionT) Builder() *flatbuffers.Builder {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b
}

func (rcv *UserSessionT) Marshal() []byte {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b.FinishedBytes()
}

func UnmarshalUserSessionT(b []byte) *UserSessionT {
	return GetRootAsUserSession(b, 0).UnPack()
}

func (rcv *UserSession) UnPackTo(t *UserSessionT) {
	t.MaxActiveSessions = rcv.MaxActiveSessions()
	t.CAA = rcv.CAA()
	t.ExpirationTime = rcv.ExpirationTime()
	t.ID = string(rcv.ID())
	t.Role = string(rcv.Role())
}

func (rcv *UserSession) UnPack() *UserSessionT {
	if rcv == nil {
		return nil
	}
	t := &UserSessionT{}
	rcv.UnPackTo(t)
	return t
}

type UserSession struct {
	_tab flatbuffers.Table
}

func GetRootAsUserSession(buf []byte, offset flatbuffers.UOffsetT) *UserSession {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserSession{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UserSession) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserSession) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserSession) MaxActiveSessions() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserSession) MutateMaxActiveSessions(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *UserSession) CAA() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserSession) MutateCAA(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *UserSession) ExpirationTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserSession) MutateExpirationTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *UserSession) ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserSession) Role() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func UserSessionStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func UserSessionAddMaxActiveSessions(builder *flatbuffers.Builder, MaxActiveSessions int64) {
	builder.PrependInt64Slot(0, MaxActiveSessions, 0)
}
func UserSessionAddCAA(builder *flatbuffers.Builder, CAA int64) {
	builder.PrependInt64Slot(1, CAA, 0)
}
func UserSessionAddExpirationTime(builder *flatbuffers.Builder, ExpirationTime int64) {
	builder.PrependInt64Slot(2, ExpirationTime, 0)
}
func UserSessionAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ID), 0)
}
func UserSessionAddRole(builder *flatbuffers.Builder, Role flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(Role), 0)
}
func UserSessionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
